#-- This template will build the terraform code by stages
#-- By using this template we can resue the code to build multiple enviroemnets

#Parameters
parameters:
  - name: Environment
    type: string
  - name: TerraformDirectory
    type: string
  - name: TerraformVersion
    type: string
  - name: commandOptions
    default: '-out=$(System.DefaultWorkingDirectory)/${{ parameters.TerraformDirectory }}/terraform.tfplan -detailed-exitcode'


# Image to use for the pipeline stages and jobs
pool:
  vmImage: ubuntu-latest

stages:

- stage: "runCheckov"
  displayName: "Checkov: Static Code Analysis"
  jobs:
  - job: "runCheckov"
    displayName: "Checkov > Pull, run and publish results of Checkov scan"
    steps:

    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: 'pip install checkov'
        displayName: Install Checkov

    - task: Bash@3
      inputs:
        targetType: 'inline'
        workingDirectory: $(System.DefaultWorkingDirectory)
        script: 'checkov -d . -o junitxml > scan-result.xml --soft-fail'
        displayName: Checkov source code scan
        ContinueOnError: false

      #Publish the results 
    - task: PublishTestResults@2
      displayName: Publish Test results
      condition: succeededOrFailed()
      inputs: 
        testResultsFormat: 'JUnit'
        TestResultFiles: '**/*scan-result.xml'
        searchFolder: '$(System.DefaultWorkingDirectory)'
        testRunTitle: Terraform source code scan
        mergeTestResults: false
        failTaskOnFailedTests: false
        publishRunAttachments: true

- stage: Terraform_Plan_${{ parameters.Environment }}
  displayName: Terraform Validate and Plan
  jobs:
  - job: Terraform_Plan
    displayName: Terraform Validate and Plan

    steps:

    # Installing terraform
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
      displayName: "Terraform Install"
      inputs:
        terraformVersion: ${{ parameters.TerraformVersion }}

    # Validate the terraform version
    - script: |
          terraform version
      displayName: "Terraform Version"

    # Terraform init

    - task: TerraformV2@2
      displayName: 'Terraform : init'
      inputs:
        provider: 'azurerm'
        command: init
        backendType: azurerm
        workingDirectory: $(System.DefaultWorkingDirectory)/${{ parameters.TerraformDirectory }}
        backendServiceArm: $(serviceConnection)
        backendAzureRmResourceGroupName: $(backend-rg)
        backendAzureRmStorageAccountName: $(backend-sa)
        backendAzureRmContainerName: $(backend-container)
        backendAzureRmKey: $(backend-key)

    - task: TerraformV2@2
      displayName: 'Terraform : validate'
      inputs:
        provider: 'azurerm'
        command: 'validate'

    - task: TerraformCLI@0
      displayName: 'Terraform : plan'
      inputs:
        command: plan
        workingDirectory: $(System.DefaultWorkingDirectory)/${{ parameters.TerraformDirectory }}
        publishPlanResults: 'CodeTest - Results'
        environmentServiceName: $(serviceConnection)
        commandOptions: ${{ parameters.commandOptions }}

    # Terraform Plan

    # - script: |
    #     # export TF_CLI_CONFIG_FILE='$(securefile.secureFilePath)'
    #     terraform plan -input=false -out=tfplan -var-file=${{ parameters.Environment }}_var.tfvars -var 'Environment=${{ parameters.Environment }}' -var 'locationshortprefix=${{ parameters.locationshortprefix  }}' -var 'rg_location=${{ parameters.location }}' -var 'administrator_login=$(sqlAdminLoginId)' -var 'administrator_login_password=$(sqlAdminLoginPassword)' -var 'order=$(sequence)' -var 'value1=$(authserver-app-clientid)' -var 'value2=$(authserver-app-url)' -var 'value3=$(func-wppcs-datamovement-appreg-id)' -var 'value4=$(sddl-create-production)' -var 'value5=$(sddl-readonly-makeoffline)' -var 'value6=$(graphapi-wppcs-adgroup-appreg-id)' -var 'value7=$(graphapi-wppcs-adgroup-appreg-sec)' -var 'value8=$(wpp-it-cloudstudio-tenant)' -var 'value9=$(authserver-app-url)/oauth2/v1' -var 'value10=$(sddl-fullcontrol-config)' -var 'hub_sub=$(tf-subscription-hub-id)' -var 'main_sub=$(tf-subscription-id)'
    #     terraform show -no-color tfplan > plan.txt
    #     # Resource providers can be > 100MB large, we don't want them in the published artifacts.
    #     rm -r .terraform
    #   workingDirectory: '$(System.DefaultWorkingDirectory)/wppStorageAutomation.DevOps/InfraDeployment/${{ parameters.TerraformDirectory }}'
    #   displayName: 'Terraform Plan'
    #   env:
    #     ARM_SUBSCRIPTION_ID: $(wpp-app-subscription-id)
    #     ARM_CLIENT_ID:       $(wpp-app-subscription-clientid)
    #     ARM_CLIENT_SECRET:   $(wpp-app-subscription-clientsecret)
    #     ARM_TENANT_ID:       $(wpp-app-subscription-tenant-id)


    - task: PublishPipelineArtifact@1
      displayName: Publish plan artifact
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)'
        artifact: 'drop'

#-- terafrom validate and apply stage

- stage: Terraform_Apply_${{ parameters.Environment }}
  displayName: Apply ${{ parameters.Environment }}
  jobs:
  - deployment: Apply
    environment: ${{ parameters.Environment }}
    displayName: Apply Terraform
    
    timeoutInMinutes: 120
    pool:
      vmImage: ubuntu-latest
    strategy:
      runOnce:
        deploy:
          steps:

          - task: DownloadPipelineArtifact@2
            displayName: Download plan
            inputs:
              artifactName: 'drop'
              targetPath: '$(Build.ArtifactStagingDirectory)'

          # Installing terraform
          - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
            displayName: "Terraform Install"
            inputs:
              terraformVersion: ${{ parameters.TerraformVersion }}

          # Validate the terraform version
          - script: |
                terraform version
            displayName: "Terraform Version"

          # Terraform init

          - task: TerraformV2@2
            displayName: 'Terraform : init'
            inputs:
              provider: 'azurerm'
              command: init
              backendType: azurerm
              workingDirectory: $(System.DefaultWorkingDirectory)/${{ parameters.TerraformDirectory }}
              backendServiceArm: $(serviceConnection)
              backendAzureRmResourceGroupName: $(backend-rg)
              backendAzureRmStorageAccountName: $(backend-sa)
              backendAzureRmContainerName: $(backend-container)
              backendAzureRmKey: $(backend-key)

          - task: TerraformCLI@0
            displayName: 'Terraform : plan'
            inputs:
              command: plan
              workingDirectory: $(System.DefaultWorkingDirectory)/${{ parameters.TerraformDirectory }}
              publishPlanResults: 'CodeTest - Results'
              environmentServiceName: $(serviceConnection)
              commandOptions: ${{ parameters.commandOptions }}

          - task: TerraformCLI@0
            displayName: 'Terraform : apply'
            condition: and(succeeded(), eq(variables['TERRAFORM_PLAN_HAS_CHANGES'],'true'))
            inputs:
              command: apply
              workingDirectory: $(System.DefaultWorkingDirectory)/${{ parameters.TerraformDirectory }}
              commandOptions: '$(System.DefaultWorkingDirectory)/${{ parameters.TerraformDirectory }}/terraform.tfplan'
              environmentServiceName: $(serviceConnection)
  